{"ast":null,"code":"var _jsxFileName = \"/Users/rashmibhaskar/twitter-app/src/User.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class User extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSearchUser = () => {\n      this.setState({\n        userID: \"\",\n        tweets: [],\n        userError: \"\"\n      });\n      fetch(`/api/twitter/${this.state.userName}`).then(res => res.json()).then(data => {\n        if (data.body.data.id) {\n          this.setState({\n            userID: data.body.data.id\n          });\n          fetch(`/api/tweets/${this.state.userID}`).then(res => res.json()).then(data => {\n            console.log(data.body.data);\n            this.setState({\n              tweets: data.body.data\n            });\n          });\n        }\n\n        if (data.body.errors) {\n          this.setState({\n            userError: \"Oops! User does not exist.....\"\n          });\n        }\n      }).catch(error => {\n        console.log(error);\n        this.setState({\n          userError: \"Oops! User does not exist.....\"\n        });\n      });\n    };\n\n    this.onInputchange = event => {\n      this.setState({\n        userName: event.target.value\n      });\n    };\n\n    this.state = {\n      userID: \"\",\n      userName: \"\",\n      tweets: [],\n      userError: \"\"\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"twitter-form\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter Username\",\n          name: \"userName\",\n          type: \"text\",\n          value: this.state.userName,\n          onChange: event => this.onInputchange(event),\n          className: \"twitter-input\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleSearchUser,\n          className: \"twitter-button\",\n          children: \"Search User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), this.state.userID !== \"\" ? this.state.tweets ? this.state.tweets.map(tweet => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"twitter-row\",\n        children: tweet.text\n      }, tweet.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 60\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-error\",\n        children: \"There are no Tweets\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 124\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"user-error\",\n        children: this.state.userError\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  }\n\n}","map":{"version":3,"sources":["/Users/rashmibhaskar/twitter-app/src/User.js"],"names":["React","User","Component","constructor","props","handleSearchUser","setState","userID","tweets","userError","fetch","state","userName","then","res","json","data","body","id","console","log","errors","catch","error","onInputchange","event","target","value","render","map","tweet","text"],"mappings":"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","sourcesContent":["import React from 'react';\n\nexport default class User extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      userID:\"\",\n      userName:\"\",\n      tweets:[],\n      userError:\"\"\n    }\n  }\n\n  handleSearchUser=()=>{\n    this.setState({\n      userID:\"\",\n      tweets:[],\n      userError:\"\"\n    })\n    fetch(`/api/twitter/${this.state.userName}`)\n    .then((res) => res.json())\n    .then((data) => \n    { \n      if(data.body.data.id)\n      {\n        this.setState({userID:data.body.data.id});\n        fetch(`/api/tweets/${this.state.userID}`)\n        .then((res) => res.json())\n        .then((data) => {console.log(data.body.data)\n        this.setState({tweets:data.body.data})\n        });\n      }\n      if(data.body.errors){\n        this.setState({userError:\"Oops! User does not exist.....\"})\n      }\n    })\n    .catch((error)=>{console.log(error)\n    this.setState({userError:\"Oops! User does not exist.....\"})\n  });\n  }\n\n  onInputchange=(event)=> {\n    this.setState({\n      userName: event.target.value\n    });\n  }\n\n  render() {\n    return (\n    <>\n          <div className=\"twitter-form\">\n            <input\n              placeholder='Enter Username'\n              name=\"userName\"\n              type='text'\n              value={this.state.userName}\n              onChange={(event)=>this.onInputchange(event)}\n              className='twitter-input'\n            />\n            <button onClick={this.handleSearchUser} className='twitter-button'>\n              Search User\n            </button>\n          </div>\n          {this.state.userID!==\"\"?\n            this.state.tweets?this.state.tweets.map(tweet=><div className=\"twitter-row\" key={tweet.id}>{tweet.text}</div>):<div className=\"user-error\">There are no Tweets</div>:\n            <div className=\"user-error\">{this.state.userError}</div>\n          }\n    </>\n    )\n  }\n}"]},"metadata":{},"sourceType":"module"}